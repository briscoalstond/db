package main

import (
	"crypto/sha256"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"time"
)

type Block struct {
	Index        int      `json:"index"`
	Timestamp    string   `json:"timestamp"`
	Transactions []string `json:"transactions"`
	PreviousHash string   `json:"previous_hash"`
	Hash         string   `json:"hash"`
	Nonce        int      `json:"nonce"`
}

func calculateHash(block Block) string {
	record, _ := json.Marshal(block)
	h := sha256.New()
	h.Write(record)
	hashed := h.Sum(nil)
	return hex.EncodeToString(hashed)
}

func generateBlock(oldBlock Block, transactions []string) Block {
	newBlock := Block{}
	newBlock.Index = oldBlock.Index + 1
	newBlock.Timestamp = time.Now().String()
	newBlock.Transactions = transactions
	newBlock.PreviousHash = oldBlock.Hash
	newBlock.Nonce = 0
	newBlock.Hash = calculateHash(newBlock)
	return newBlock
}

func isBlockValid(newBlock, oldBlock Block) bool {
	if oldBlock.Index+1 != newBlock.Index {
		return false
	}
	if oldBlock.Hash != newBlock.PreviousHash {
		return false
	}
	if calculateHash(newBlock) != newBlock.Hash {
		return false
	}
	return true
}

func main() {
	genesisBlock := Block{
		Index:        0,
		Timestamp:    time.Now().String(),
		Transactions: []string{"Genesis Block"},
		PreviousHash: "",
		Nonce:        0,
	}
	genesisBlock.Hash = calculateHash(genesisBlock)

	newBlock := generateBlock(genesisBlock, []string{"Alice->Bob:10"})
	fmt.Println("新块:", newBlock)
	fmt.Println("区块有效性:", isBlockValid(newBlock, genesisBlock))
}
