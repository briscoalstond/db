#include <iostream>
#include <vector>
#include <queue>
#include <limits>

using namespace std;

const int INF = numeric_limits<int>::max();

void dijkstra(int source, const vector<vector<pair<int, int>>>& graph) {
    int n = graph.size();
    vector<int> dist(n, INF);
    dist[source] = 0;
    // 优先队列：存储 (距离, 顶点) 对
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, source});
    
    while(!pq.empty()){
        auto [d, u] = pq.top();
        pq.pop();
        if(d != dist[u]) continue;  // 如果不是最新距离则跳过
        for(auto [v, w] : graph[u]){
            if(dist[u] + w < dist[v]){
                dist[v] = dist[u] + w;
                pq.push({dist[v], v});
            }
        }
    }
    
    cout << "源点 " << source << " 到各点的最短距离:" << endl;
    for(int i = 0; i < n; i++){
        cout << "到 " << i << ": " << (dist[i] == INF ? -1 : dist[i]) << endl;
    }
}

int main(){
    // 构建图: 邻接表表示，每个 pair 为 (邻接点, 权重)
    int numVertices = 5;
    vector<vector<pair<int, int>>> graph(numVertices);
    // 添加边 (u, v, w)
    graph[0].push_back({1, 10});
    graph[0].push_back({2, 3});
    graph[1].push_back({2, 1});
    graph[1].push_back({3, 2});
    graph[2].push_back({1, 4});
    graph[2].push_back({3, 8});
    graph[2].push_back({4, 2});
    graph[3].push_back({4, 7});
    graph[4].push_back({3, 9});
    
    dijkstra(0, graph);
    return 0;
}
